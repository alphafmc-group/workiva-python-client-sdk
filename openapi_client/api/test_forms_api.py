# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.graph_attachment import GraphAttachment
from openapi_client.models.graph_attachment_export import GraphAttachmentExport
from openapi_client.models.graph_attachment_upload import GraphAttachmentUpload
from openapi_client.models.graph_attachment_upload_response import GraphAttachmentUploadResponse
from openapi_client.models.graph_attachments_list_result import GraphAttachmentsListResult
from openapi_client.models.json_patch_operation import JSONPatchOperation
from openapi_client.models.matrices_list_result import MatricesListResult
from openapi_client.models.matrix import Matrix
from openapi_client.models.matrix_sample import MatrixSample
from openapi_client.models.matrix_samples_list_result import MatrixSamplesListResult
from openapi_client.models.test_form import TestForm
from openapi_client.models.test_form_export import TestFormExport
from openapi_client.models.test_forms_list_result import TestFormsListResult
from openapi_client.models.test_phase import TestPhase
from openapi_client.models.test_phases_list_result import TestPhasesListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TestFormsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_matrix(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix: Annotated[Matrix, Field(description="The properties of the matrix to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Matrix:
        """Create a new matrix

        Create a new empty [matrix](ref:platform-testforms#matrix). The `id` field for the matrix and its columns should be left blank; this will be populated by the endpoint. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix: The properties of the matrix to create (required)
        :type matrix: Matrix
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_matrix_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix=matrix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_matrix_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix: Annotated[Matrix, Field(description="The properties of the matrix to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Matrix]:
        """Create a new matrix

        Create a new empty [matrix](ref:platform-testforms#matrix). The `id` field for the matrix and its columns should be left blank; this will be populated by the endpoint. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix: The properties of the matrix to create (required)
        :type matrix: Matrix
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_matrix_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix=matrix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_matrix_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix: Annotated[Matrix, Field(description="The properties of the matrix to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new matrix

        Create a new empty [matrix](ref:platform-testforms#matrix). The `id` field for the matrix and its columns should be left blank; this will be populated by the endpoint. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix: The properties of the matrix to create (required)
        :type matrix: Matrix
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_matrix_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix=matrix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_matrix_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if matrix is not None:
            _body_params = matrix


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_sample(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[MatrixSample, Field(description="The properties of the sample to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixSample:
        """Create a new sample

        Create a new [sample](ref:platform-testforms#matrixsample) in a [matrix](ref:platform-testforms#matrix). The new sample will be appended to the end of the matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: The properties of the sample to create (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sample_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_sample_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[MatrixSample, Field(description="The properties of the sample to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixSample]:
        """Create a new sample

        Create a new [sample](ref:platform-testforms#matrixsample) in a [matrix](ref:platform-testforms#matrix). The new sample will be appended to the end of the matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: The properties of the sample to create (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sample_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_sample_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[MatrixSample, Field(description="The properties of the sample to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new sample

        Create a new [sample](ref:platform-testforms#matrixsample) in a [matrix](ref:platform-testforms#matrix). The new sample will be appended to the end of the matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: The properties of the sample to create (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sample_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_sample_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        matrix_sample,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if matrix_sample is not None:
            _body_params = matrix_sample


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_matrices(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatricesListResult:
        """Retrieve a list of matrices

        Returns a list of [matrices](ref:platform-testforms#matrix). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrices_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatricesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_matrices_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatricesListResult]:
        """Retrieve a list of matrices

        Returns a list of [matrices](ref:platform-testforms#matrix). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrices_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatricesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_matrices_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of matrices

        Returns a list of [matrices](ref:platform-testforms#matrix). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrices_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatricesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_matrices_serialize(
        self,
        test_form_id,
        test_phase_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_matrix_attachment_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachment:
        """Retrieve a single matrix attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_matrix_attachment_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachment]:
        """Retrieve a single matrix attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_matrix_attachment_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single matrix attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_matrix_attachment_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/attachments/{attachmentId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_matrix_attachments(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentsListResult:
        """Retrieve a list of matrix attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_matrix_attachments_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentsListResult]:
        """Retrieve a list of matrix attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_matrix_attachments_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of matrix attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a matrix. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_matrix_attachments_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/attachments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_matrix_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Matrix:
        """Retrieve a single matrix

        Retrieves a [matrix](ref:platform-testforms#matrix) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_matrix_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Matrix]:
        """Retrieve a single matrix

        Retrieves a [matrix](ref:platform-testforms#matrix) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_matrix_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single matrix

        Retrieves a [matrix](ref:platform-testforms#matrix) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_matrix_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Matrix",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_matrix_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sample_attachment_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachment:
        """Retrieve a single sample attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sample_attachment_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachment]:
        """Retrieve a single sample attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sample_attachment_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single sample attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sample_attachment_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}/attachments/{attachmentId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sample_attachments(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentsListResult:
        """Retrieve a list of sample attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [sample](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sample_attachments_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentsListResult]:
        """Retrieve a list of sample attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [sample](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sample_attachments_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of sample attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [sample](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sample_attachments_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}/attachments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sample_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixSample:
        """Retrieve a single sample

        Retrieves a [sample](ref:platform-testforms#matrixsample) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sample_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixSample]:
        """Retrieve a single sample

        Retrieves a [sample](ref:platform-testforms#matrixsample) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sample_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single sample

        Retrieves a [sample](ref:platform-testforms#matrixsample) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sample_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_samples(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixSamplesListResult:
        """Retrieve a list of samples

        Returns a list of [samples](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_samples_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSamplesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_samples_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixSamplesListResult]:
        """Retrieve a list of samples

        Returns a list of [samples](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_samples_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSamplesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_samples_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of samples

        Returns a list of [samples](ref:platform-testforms#matrixsample). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_samples_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSamplesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_samples_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_form_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestForm:
        """Retrieve a single test form

        Retrieves a [test form](ref:platform-testforms#testform) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_form_by_id_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestForm",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_form_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestForm]:
        """Retrieve a single test form

        Retrieves a [test form](ref:platform-testforms#testform) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_form_by_id_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestForm",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_form_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single test form

        Retrieves a [test form](ref:platform-testforms#testform) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_form_by_id_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestForm",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_form_by_id_serialize(
        self,
        test_form_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_forms(
        self,
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestFormsListResult:
        """Retrieve a list of test forms

        Retrieves a list of [test forms](ref:platform-testforms#testform). 

        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_forms_serialize(
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestFormsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_forms_with_http_info(
        self,
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestFormsListResult]:
        """Retrieve a list of test forms

        Retrieves a list of [test forms](ref:platform-testforms#testform). 

        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_forms_serialize(
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestFormsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_forms_without_preload_content(
        self,
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of test forms

        Retrieves a list of [test forms](ref:platform-testforms#testform). 

        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_forms_serialize(
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestFormsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_forms_serialize(
        self,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_phase_attachment_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachment:
        """Retrieve a single test phase attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_phase_attachment_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachment]:
        """Retrieve a single test phase attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_phase_attachment_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single test phase attachment

        Retrieve a single [attachment](ref:platform-testforms#graphattachment) by its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachment_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachment",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_phase_attachment_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/attachments/{attachmentId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_phase_attachments(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentsListResult:
        """Retrieve a list of test phase attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [test phase](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_phase_attachments_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentsListResult]:
        """Retrieve a list of test phase attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [test phase](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_phase_attachments_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of test phase attachments

        Returns a list of [attachments](ref:platform-testforms#graphattachment) for a [test phase](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_attachments_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphAttachmentsListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_phase_attachments_serialize(
        self,
        test_form_id,
        test_phase_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/attachments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_phase_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestPhase:
        """Retrive a single test phase

        Retrieves a [test phase](ref:platform-testforms#testphase) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhase",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_phase_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestPhase]:
        """Retrive a single test phase

        Retrieves a [test phase](ref:platform-testforms#testphase) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhase",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_phase_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrive a single test phase

        Retrieves a [test phase](ref:platform-testforms#testphase) given its ID. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phase_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhase",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_phase_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_test_phases(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestPhasesListResult:
        """Retrieve a list of test phases

        Returns a list of [test phases](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phases_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhasesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_test_phases_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestPhasesListResult]:
        """Retrieve a list of test phases

        Returns a list of [test phases](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phases_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhasesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_test_phases_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        expand: Annotated[Optional[StrictStr], Field(description="Returns related resources inline with the main resource")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of test phases

        Returns a list of [test phases](ref:platform-testforms#testphase). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param expand: Returns related resources inline with the main resource
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_test_phases_serialize(
            test_form_id=test_form_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestPhasesListResult",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_test_phases_serialize(
        self,
        test_form_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/testForms/{testFormId}/testPhases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matrix_attachment_download_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate a matrix attachment download

        Asynchronously downloads an attachment from a [matrix](ref:platform-testforms#matrix).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matrix_attachment_download_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate a matrix attachment download

        Asynchronously downloads an attachment from a [matrix](ref:platform-testforms#matrix).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matrix_attachment_download_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a matrix attachment download

        Asynchronously downloads an attachment from a [matrix](ref:platform-testforms#matrix).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matrix_attachment_download_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/attachments/{attachmentId}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matrix_attachment_export_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate an export of a matrix attachment

        Asynchronously exports an attachment for a [matrix](ref:platform-testforms#matrix) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment upload (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matrix_attachment_export_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate an export of a matrix attachment

        Asynchronously exports an attachment for a [matrix](ref:platform-testforms#matrix) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment upload (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matrix_attachment_export_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate an export of a matrix attachment

        Asynchronously exports an attachment for a [matrix](ref:platform-testforms#matrix) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment upload (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matrix_attachment_export_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        attachment_id,
        graph_attachment_export,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_export is not None:
            _body_params = graph_attachment_export


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/attachments/{attachmentId}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matrix_attachment_upload(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentUploadResponse:
        """Initiate a matrix attachment upload

        Starts the process to upload and attach a file to a [matrix](ref:platform-testforms#matrix) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-overview#authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matrix_attachment_upload_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentUploadResponse]:
        """Initiate a matrix attachment upload

        Starts the process to upload and attach a file to a [matrix](ref:platform-testforms#matrix) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-overview#authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matrix_attachment_upload_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a matrix attachment upload

        Starts the process to upload and attach a file to a [matrix](ref:platform-testforms#matrix) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-overview#authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matrix_attachment_upload_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        graph_attachment_upload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_upload is not None:
            _body_params = graph_attachment_upload


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/attachmentUpload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def partially_update_sample_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        json_patch_operation: Annotated[List[JSONPatchOperation], Field(description="A collection of patch operations to apply to the sample.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixSample:
        """Partially update a single sample

        Partially updates the properties of a [sample](ref:platform-testforms#matrixsample). Note: Cell values must always be strings, even if they represent a number. ### Options |Path|PATCH Operations Supported| |---|---| |`/dataValues/<index>/value`|`replace`| |`/resultValues/<index>/value`|`replace`| 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param json_patch_operation: A collection of patch operations to apply to the sample. (required)
        :type json_patch_operation: List[JSONPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partially_update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            json_patch_operation=json_patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def partially_update_sample_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        json_patch_operation: Annotated[List[JSONPatchOperation], Field(description="A collection of patch operations to apply to the sample.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixSample]:
        """Partially update a single sample

        Partially updates the properties of a [sample](ref:platform-testforms#matrixsample). Note: Cell values must always be strings, even if they represent a number. ### Options |Path|PATCH Operations Supported| |---|---| |`/dataValues/<index>/value`|`replace`| |`/resultValues/<index>/value`|`replace`| 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param json_patch_operation: A collection of patch operations to apply to the sample. (required)
        :type json_patch_operation: List[JSONPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partially_update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            json_patch_operation=json_patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def partially_update_sample_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        json_patch_operation: Annotated[List[JSONPatchOperation], Field(description="A collection of patch operations to apply to the sample.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Partially update a single sample

        Partially updates the properties of a [sample](ref:platform-testforms#matrixsample). Note: Cell values must always be strings, even if they represent a number. ### Options |Path|PATCH Operations Supported| |---|---| |`/dataValues/<index>/value`|`replace`| |`/resultValues/<index>/value`|`replace`| 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param json_patch_operation: A collection of patch operations to apply to the sample. (required)
        :type json_patch_operation: List[JSONPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partially_update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            json_patch_operation=json_patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _partially_update_sample_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        json_patch_operation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'JSONPatchOperation': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if json_patch_operation is not None:
            _body_params = json_patch_operation


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_attachment_download_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate a download of a sample attachment

        Asynchronously downloads an attachment from a [sample](ref:platform-testforms#matrixsample).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_attachment_download_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate a download of a sample attachment

        Asynchronously downloads an attachment from a [sample](ref:platform-testforms#matrixsample).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_attachment_download_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a download of a sample attachment

        Asynchronously downloads an attachment from a [sample](ref:platform-testforms#matrixsample).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_attachment_download_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}/attachments/{attachmentId}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_attachment_export_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate an export of a sample attachment

        Asynchronously exports an attachment for a [sample](ref:platform-testforms#matrixsample) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_attachment_export_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate an export of a sample attachment

        Asynchronously exports an attachment for a [sample](ref:platform-testforms#matrixsample) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_attachment_export_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate an export of a sample attachment

        Asynchronously exports an attachment for a [sample](ref:platform-testforms#matrixsample) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_attachment_export_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        attachment_id,
        graph_attachment_export,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_export is not None:
            _body_params = graph_attachment_export


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}/attachments/{attachmentId}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_attachment_upload(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentUploadResponse:
        """Initiate an upload of a sample attachment

        Starts the process to upload and attach a file to a [sample](ref:platform-testforms#matrixsample) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_attachment_upload_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentUploadResponse]:
        """Initiate an upload of a sample attachment

        Starts the process to upload and attach a file to a [sample](ref:platform-testforms#matrixsample) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_attachment_upload_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment upload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate an upload of a sample attachment

        Starts the process to upload and attach a file to a [sample](ref:platform-testforms#matrixsample) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param graph_attachment_upload: Details about the attachment upload (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_attachment_upload_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        graph_attachment_upload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_upload is not None:
            _body_params = graph_attachment_upload


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}/attachmentUpload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_insertion(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to insert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Insert samples

        Inserts multiple [samples](ref:platform-testforms#matrixsamples) into a [matrix](ref:platform-testforms#matrix), and appends new samples to the end of the matrix. You can leave columns empty for later use. For new samples, provide no IDs; the endpoint generates them.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to insert (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_insertion_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_insertion_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to insert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Insert samples

        Inserts multiple [samples](ref:platform-testforms#matrixsamples) into a [matrix](ref:platform-testforms#matrix), and appends new samples to the end of the matrix. You can leave columns empty for later use. For new samples, provide no IDs; the endpoint generates them.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to insert (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_insertion_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_insertion_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to insert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert samples

        Inserts multiple [samples](ref:platform-testforms#matrixsamples) into a [matrix](ref:platform-testforms#matrix), and appends new samples to the end of the matrix. You can leave columns empty for later use. For new samples, provide no IDs; the endpoint generates them.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to insert (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_insertion_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_insertion_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        matrix_sample,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'MatrixSample': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if matrix_sample is not None:
            _body_params = matrix_sample


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/insertion',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_update(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update samples

        Updates multiple [samples](ref:platform-testforms#matrixsamples), with the requestBody of each specifying columns to update by their IDs. Columns not included in the request remain as-is.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to update (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_update_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_update_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update samples

        Updates multiple [samples](ref:platform-testforms#matrixsamples), with the requestBody of each specifying columns to update by their IDs. Columns not included in the request remain as-is.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to update (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_update_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_update_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        matrix_sample: Annotated[List[MatrixSample], Field(description="Details about the samples to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update samples

        Updates multiple [samples](ref:platform-testforms#matrixsamples), with the requestBody of each specifying columns to update by their IDs. Columns not included in the request remain as-is.

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param matrix_sample: Details about the samples to update (required)
        :type matrix_sample: List[MatrixSample]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_update_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_update_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        matrix_sample,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'MatrixSample': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if matrix_sample is not None:
            _body_params = matrix_sample


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/update',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_form_export(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_form_export: Annotated[TestFormExport, Field(description="Details about the test form export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate a test form export

        Asynchronously exports a [test form](ref:platform-testforms#testform).  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_form_export: Details about the test form export (required)
        :type test_form_export: TestFormExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_form_export_serialize(
            test_form_id=test_form_id,
            test_form_export=test_form_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_form_export_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_form_export: Annotated[TestFormExport, Field(description="Details about the test form export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate a test form export

        Asynchronously exports a [test form](ref:platform-testforms#testform).  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_form_export: Details about the test form export (required)
        :type test_form_export: TestFormExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_form_export_serialize(
            test_form_id=test_form_id,
            test_form_export=test_form_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_form_export_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_form_export: Annotated[TestFormExport, Field(description="Details about the test form export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a test form export

        Asynchronously exports a [test form](ref:platform-testforms#testform).  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_form_export: Details about the test form export (required)
        :type test_form_export: TestFormExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_form_export_serialize(
            test_form_id=test_form_id,
            test_form_export=test_form_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_form_export_serialize(
        self,
        test_form_id,
        test_form_export,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if test_form_export is not None:
            _body_params = test_form_export


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_phase_attachment_download_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate a test phase attachment download

        Asynchronously downloads an attachment from a [test phase](ref:platform-testforms#testphase).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_phase_attachment_download_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate a test phase attachment download

        Asynchronously downloads an attachment from a [test phase](ref:platform-testforms#testphase).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_phase_attachment_download_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a test phase attachment download

        Asynchronously downloads an attachment from a [test phase](ref:platform-testforms#testphase).  Responses include a `Location` header, which indicates where to poll for download results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the download is ready, its status will be `completed`, and the response body includes a `resourceURL`. To download the file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the download request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_download_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_phase_attachment_download_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        attachment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/attachments/{attachmentId}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_phase_attachment_export_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Initiate a test phase attachment export

        Asynchronously exports an attachment for a [test phase](ref:platform-testforms#testphase) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_phase_attachment_export_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Initiate a test phase attachment export

        Asynchronously exports an attachment for a [test phase](ref:platform-testforms#testphase) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_phase_attachment_export_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        attachment_id: Annotated[StrictStr, Field(description="The unique identifier of the attachment")],
        graph_attachment_export: Annotated[GraphAttachmentExport, Field(description="Details about the attachment export")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a test phase attachment export

        Asynchronously exports an attachment for a [test phase](ref:platform-testforms#testphase) to .PDF.  Responses include a `Location` header, which indicates where to poll for export results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid). When the export completes, its status will be `completed`, and the response body includes a `resourceURL`. To download the exported file, perform a GET on the `resourceURL` with the same authentication credentials and flow as the export request. For more details, see [Authentication documentation](ref:platform-authentication). 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param attachment_id: The unique identifier of the attachment (required)
        :type attachment_id: str
        :param graph_attachment_export: Details about the attachment export (required)
        :type graph_attachment_export: GraphAttachmentExport
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_export_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            attachment_id=attachment_id,
            graph_attachment_export=graph_attachment_export,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_phase_attachment_export_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        attachment_id,
        graph_attachment_export,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if attachment_id is not None:
            _path_params['attachmentId'] = attachment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_export is not None:
            _body_params = graph_attachment_export


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/attachments/{attachmentId}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_phase_attachment_upload(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphAttachmentUploadResponse:
        """Initiate a test phase attachment upload

        Starts the process to upload and attach a file to a [test phase](ref:platform-testforms#testphase) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid).

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param graph_attachment_upload: Details about the attachment (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_phase_attachment_upload_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphAttachmentUploadResponse]:
        """Initiate a test phase attachment upload

        Starts the process to upload and attach a file to a [test phase](ref:platform-testforms#testphase) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid).

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param graph_attachment_upload: Details about the attachment (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_phase_attachment_upload_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        graph_attachment_upload: Annotated[GraphAttachmentUpload, Field(description="Details about the attachment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate a test phase attachment upload

        Starts the process to upload and attach a file to a [test phase](ref:platform-testforms#testphase) using a [graph attachment upload](ref:platform-testforms#graphattachmentupload) object. The response body will include an `uploadUrl`. To upload the file contents, perform a PUT on the `uploadUrl` with the same authentication credentials and flow as the attachmentUpload request. For more details, see [Authentication documentation](ref:platform-authentication).  The response also includes a `Location` header, which indicates where to poll for operation results. For more details on long-running job polling, see [Operations endpoint](ref:platform-operations#getoperationbyid).

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param graph_attachment_upload: Details about the attachment (required)
        :type graph_attachment_upload: GraphAttachmentUpload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_phase_attachment_upload_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            graph_attachment_upload=graph_attachment_upload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "GraphAttachmentUploadResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_phase_attachment_upload_serialize(
        self,
        test_form_id,
        test_phase_id,
        graph_attachment_upload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_attachment_upload is not None:
            _body_params = graph_attachment_upload


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/attachmentUpload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_sample_by_id(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        matrix_sample: Annotated[MatrixSample, Field(description="All properties for the sample, not just those to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixSample:
        """Update a single sample

        Fully replaces all elements of a [sample](ref:platform-testforms#matrixsample); this is *not* a partial update. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param matrix_sample: All properties for the sample, not just those to update (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_sample_by_id_with_http_info(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        matrix_sample: Annotated[MatrixSample, Field(description="All properties for the sample, not just those to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixSample]:
        """Update a single sample

        Fully replaces all elements of a [sample](ref:platform-testforms#matrixsample); this is *not* a partial update. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param matrix_sample: All properties for the sample, not just those to update (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_sample_by_id_without_preload_content(
        self,
        test_form_id: Annotated[StrictStr, Field(description="The unique identifier of the test form")],
        test_phase_id: Annotated[StrictStr, Field(description="The unique identifier of the test phase")],
        matrix_id: Annotated[StrictStr, Field(description="The unique identifier of the matrix")],
        sample_id: Annotated[StrictStr, Field(description="The unique identifier of the sample")],
        matrix_sample: Annotated[MatrixSample, Field(description="All properties for the sample, not just those to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a single sample

        Fully replaces all elements of a [sample](ref:platform-testforms#matrixsample); this is *not* a partial update. 

        :param test_form_id: The unique identifier of the test form (required)
        :type test_form_id: str
        :param test_phase_id: The unique identifier of the test phase (required)
        :type test_phase_id: str
        :param matrix_id: The unique identifier of the matrix (required)
        :type matrix_id: str
        :param sample_id: The unique identifier of the sample (required)
        :type sample_id: str
        :param matrix_sample: All properties for the sample, not just those to update (required)
        :type matrix_sample: MatrixSample
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sample_by_id_serialize(
            test_form_id=test_form_id,
            test_phase_id=test_phase_id,
            matrix_id=matrix_id,
            sample_id=sample_id,
            matrix_sample=matrix_sample,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixSample",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_sample_by_id_serialize(
        self,
        test_form_id,
        test_phase_id,
        matrix_id,
        sample_id,
        matrix_sample,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_form_id is not None:
            _path_params['testFormId'] = test_form_id
        if test_phase_id is not None:
            _path_params['testPhaseId'] = test_phase_id
        if matrix_id is not None:
            _path_params['matrixId'] = matrix_id
        if sample_id is not None:
            _path_params['sampleId'] = sample_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if matrix_sample is not None:
            _body_params = matrix_sample


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'oauth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/testForms/{testFormId}/testPhases/{testPhaseId}/matrices/{matrixId}/samples/{sampleId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


