# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Edit(BaseModel):
    """
    Edit
    """ # noqa: E501
    operation: StrictStr = Field(description="The operation to carry out (see enumerated values)")
    label: Optional[StrictStr] = Field(default=None, description="To create or delete a relationship, the label describing how the records are related ")
    type: Optional[StrictStr] = Field(default=None, description="To create a record, the type of record to create ")
    record_id: Optional[StrictStr] = Field(default=None, description="To create or delete a relationship, the actual ID or temporaryRecordId of the source record.", alias="recordId")
    target_id: Optional[StrictStr] = Field(default=None, description="To create or delete a relationship, the ID of its target record. If creating, the actual ID or temporaryRecordId. If deleting, the actual ID. ", alias="targetId")
    temporary_record_id: Optional[StrictStr] = Field(default=None, description="To create a record, a temporary ID that is replaced at time of processing. You can subsequently use this ID within the same request to create relationships between created records.", alias="temporaryRecordId")
    properties: Optional[Dict[str, Any]] = Field(default=None, description="To create a record or set its properties, the properties related to the record type. Keyed by the property name, this always includes the `datatype` and `value`. When setting properties, send a partial object representing only the values to update. Valid datatypes are `integer`, `number`, `boolean`, `string`, `date-time`, `map`, `list`, `array`, and `set`.")
    __properties: ClassVar[List[str]] = ["operation", "label", "type", "recordId", "targetId", "temporaryRecordId", "properties"]

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['create_record', 'delete_record', 'create_relationship', 'delete_relationship', 'set_properties']):
            raise ValueError("must be one of enum values ('create_record', 'delete_record', 'create_relationship', 'delete_relationship', 'set_properties')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Edit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Edit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "label": obj.get("label"),
            "type": obj.get("type"),
            "recordId": obj.get("recordId"),
            "targetId": obj.get("targetId"),
            "temporaryRecordId": obj.get("temporaryRecordId"),
            "properties": obj.get("properties")
        })
        return _obj


