# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.action import Action
from openapi_client.models.task_location import TaskLocation
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Details about the task, including its ID, status, associated users, and milestone dates. 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the task")
    title: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="The title of the task, up to 500 characters")
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default='', description="The description of the task, up to 2000 characters")
    status: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default='Created', description="Whether the task is `Created`, `Completed`, or `Cancelled`")
    due_date: Optional[datetime] = Field(default=None, description="The task's due date", alias="dueDate")
    source_url: Optional[StrictStr] = Field(default=None, description="The link to the task in Wdesk Home or within a document.", alias="sourceUrl")
    assignee: Optional[User] = None
    created: Optional[Action] = None
    modified: Optional[Action] = None
    completed: Optional[Action] = None
    location: Optional[TaskLocation] = None
    __properties: ClassVar[List[str]] = ["id", "title", "description", "status", "dueDate", "sourceUrl", "assignee", "created", "modified", "completed", "location"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Cancelled', 'Completed', 'Created']):
            raise ValueError("must be one of enum values ('Cancelled', 'Completed', 'Created')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "source_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed
        if self.completed:
            _dict['completed'] = self.completed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description") if obj.get("description") is not None else '',
            "status": obj.get("status") if obj.get("status") is not None else 'Created',
            "dueDate": obj.get("dueDate"),
            "sourceUrl": obj.get("sourceUrl"),
            "assignee": User.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "created": Action.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "modified": Action.from_dict(obj["modified"]) if obj.get("modified") is not None else None,
            "completed": Action.from_dict(obj["completed"]) if obj.get("completed") is not None else None,
            "location": TaskLocation.from_dict(obj["location"]) if obj.get("location") is not None else None
        })
        return _obj


