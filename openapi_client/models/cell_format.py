# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.cell_format_borders import CellFormatBorders
from openapi_client.models.cell_format_indent import CellFormatIndent
from typing import Optional, Set
from typing_extensions import Self

class CellFormat(BaseModel):
    """
    Cell Formats. Fields that are omitted will be ignored.
    """ # noqa: E501
    indent: Optional[CellFormatIndent] = None
    horizontal_align: Optional[StrictStr] = Field(default=None, description="The horizontal alignment of the content in the cell", alias="horizontalAlign")
    vertical_align: Optional[StrictStr] = Field(default=None, description="The vertical alignment of the content in the cell", alias="verticalAlign")
    text_rotation: Optional[StrictStr] = Field(default=None, description="The text orientation", alias="textRotation")
    background_color: Optional[Annotated[str, Field(strict=True)]] = Field(default='#000000', description="A hex color code", alias="backgroundColor")
    leader_dots: Optional[StrictStr] = Field(default=None, description="The leader dot pattern to show on the cell", alias="leaderDots")
    borders: Optional[CellFormatBorders] = None
    __properties: ClassVar[List[str]] = ["indent", "horizontalAlign", "verticalAlign", "textRotation", "backgroundColor", "leaderDots", "borders"]

    @field_validator('horizontal_align')
    def horizontal_align_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEFT', 'RIGHT', 'CENTER', 'JUSTIFIED']):
            raise ValueError("must be one of enum values ('LEFT', 'RIGHT', 'CENTER', 'JUSTIFIED')")
        return value

    @field_validator('vertical_align')
    def vertical_align_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOP', 'MIDDLE', 'BOTTOM']):
            raise ValueError("must be one of enum values ('TOP', 'MIDDLE', 'BOTTOM')")
        return value

    @field_validator('text_rotation')
    def text_rotation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('HORIZONTAL', 'ASCENDING', 'DESCENDING')")
        return value

    @field_validator('background_color')
    def background_color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#(?:[0-9a-fA-F]{3}){1,2}$", value):
            raise ValueError(r"must validate the regular expression /^#(?:[0-9a-fA-F]{3}){1,2}$/")
        return value

    @field_validator('leader_dots')
    def leader_dots_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NARROW', 'WIDE']):
            raise ValueError("must be one of enum values ('NARROW', 'WIDE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CellFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of indent
        if self.indent:
            _dict['indent'] = self.indent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of borders
        if self.borders:
            _dict['borders'] = self.borders.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CellFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indent": CellFormatIndent.from_dict(obj["indent"]) if obj.get("indent") is not None else None,
            "horizontalAlign": obj.get("horizontalAlign"),
            "verticalAlign": obj.get("verticalAlign"),
            "textRotation": obj.get("textRotation"),
            "backgroundColor": obj.get("backgroundColor") if obj.get("backgroundColor") is not None else '#000000',
            "leaderDots": obj.get("leaderDots"),
            "borders": CellFormatBorders.from_dict(obj["borders"]) if obj.get("borders") is not None else None
        })
        return _obj


