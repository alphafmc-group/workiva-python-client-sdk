# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SpreadsheetToXlsxOptions(BaseModel):
    """
    Optional options to export the spreadsheet as a Microsoft Excel (.XLSX) file. If no options are provided, `exportAsFormulas` defaults to False, and `exportPrecision` defaults to `fullPrecision`.
    """ # noqa: E501
    export_precision: Optional[StrictStr] = Field(default='fullPrecision', description="How to export values in the sheet when exporting to .XLSX \"fullPrecision\" by default. ", alias="exportPrecision")
    export_as_formulas: Optional[StrictBool] = Field(default=False, description="Whether to export cells that contain formulas as the formula or its result when exporting to .XLSX. False by default.", alias="exportAsFormulas")
    __properties: ClassVar[List[str]] = ["exportPrecision", "exportAsFormulas"]

    @field_validator('export_precision')
    def export_precision_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fullPrecision', 'rounded', 'displayed']):
            raise ValueError("must be one of enum values ('fullPrecision', 'rounded', 'displayed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpreadsheetToXlsxOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpreadsheetToXlsxOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exportPrecision": obj.get("exportPrecision") if obj.get("exportPrecision") is not None else 'fullPrecision',
            "exportAsFormulas": obj.get("exportAsFormulas") if obj.get("exportAsFormulas") is not None else False
        })
        return _obj


