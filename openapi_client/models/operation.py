# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.operation_detail import OperationDetail
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    Details about the operation, including its ID, status, milestone dates, and the url of the resource upon successful completion of the operation. 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the operation")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the operation")
    created: Optional[Action] = None
    updated: Optional[Action] = None
    resource_url: Optional[StrictStr] = Field(default=None, description="The link to the resulting resource", alias="resourceUrl")
    original_request: Optional[StrictStr] = Field(default=None, description="This is the Request ID that initiated this async operation. Giving this ID to support can help track issues with your operations.", alias="originalRequest")
    details: Optional[List[OperationDetail]] = Field(default=None, description="A list of additional details about the operation")
    __properties: ClassVar[List[str]] = ["id", "status", "created", "updated", "resourceUrl", "originalRequest", "details"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['acknowledged', 'queued', 'started', 'completed', 'cancelled', 'failed']):
            raise ValueError("must be one of enum values ('acknowledged', 'queued', 'started', 'completed', 'cancelled', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "status",
            "resource_url",
            "original_request",
            "details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        # set to None if resource_url (nullable) is None
        # and model_fields_set contains the field
        if self.resource_url is None and "resource_url" in self.model_fields_set:
            _dict['resourceUrl'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "created": Action.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "updated": Action.from_dict(obj["updated"]) if obj.get("updated") is not None else None,
            "resourceUrl": obj.get("resourceUrl"),
            "originalRequest": obj.get("originalRequest"),
            "details": [OperationDetail.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None
        })
        return _obj


