# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cell_data import CellData
from openapi_client.models.column_metadata import ColumnMetadata
from openapi_client.models.range import Range
from openapi_client.models.row_metadata import RowMetadata
from typing import Optional, Set
from typing_extensions import Self

class SheetData(BaseModel):
    """
    Details about the section, including its ID and name. 
    """ # noqa: E501
    range: Optional[Range] = None
    merges: Optional[List[Range]] = Field(default=None, description="Merged ranges that intersect with the request range")
    row_metadata: Optional[List[RowMetadata]] = Field(default=None, description="Metadata about the rows in the request range", alias="rowMetadata")
    column_metadata: Optional[List[ColumnMetadata]] = Field(default=None, description="Metadata about the columns in the request range", alias="columnMetadata")
    cells: Optional[List[List[CellData]]] = Field(default=None, description="Cell data in row-major order")
    __properties: ClassVar[List[str]] = ["range", "merges", "rowMetadata", "columnMetadata", "cells"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SheetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in merges (list)
        _items = []
        if self.merges:
            for _item_merges in self.merges:
                if _item_merges:
                    _items.append(_item_merges.to_dict())
            _dict['merges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in row_metadata (list)
        _items = []
        if self.row_metadata:
            for _item_row_metadata in self.row_metadata:
                if _item_row_metadata:
                    _items.append(_item_row_metadata.to_dict())
            _dict['rowMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in column_metadata (list)
        _items = []
        if self.column_metadata:
            for _item_column_metadata in self.column_metadata:
                if _item_column_metadata:
                    _items.append(_item_column_metadata.to_dict())
            _dict['columnMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cells (list of list)
        _items = []
        if self.cells:
            for _item_cells in self.cells:
                if _item_cells:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_cells if _inner_item is not None]
                    )
            _dict['cells'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SheetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "range": Range.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "merges": [Range.from_dict(_item) for _item in obj["merges"]] if obj.get("merges") is not None else None,
            "rowMetadata": [RowMetadata.from_dict(_item) for _item in obj["rowMetadata"]] if obj.get("rowMetadata") is not None else None,
            "columnMetadata": [ColumnMetadata.from_dict(_item) for _item in obj["columnMetadata"]] if obj.get("columnMetadata") is not None else None,
            "cells": [
                    [CellData.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["cells"]
                ] if obj.get("cells") is not None else None
        })
        return _obj


