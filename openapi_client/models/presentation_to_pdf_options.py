# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PresentationToPdfOptions(BaseModel):
    """
    Optional options to export the presentation as a portable document file (.PDF). If no options are provided, all options default to False. 
    """ # noqa: E501
    include_hyperlinks: Optional[StrictBool] = Field(default=False, description="Whether to include hyperlinks when exporting to .PDF. False by default.", alias="includeHyperlinks")
    include_leader_dots: Optional[StrictBool] = Field(default=False, description="Whether to include leader dots when exporting to .PDF. False by default.", alias="includeLeaderDots")
    include_alternate_row_fill: Optional[StrictBool] = Field(default=False, description="Whether to include alternate row fill in the presentation's tables when exporting to .PDF. False by default.", alias="includeAlternateRowFill")
    tag_for_web_accessibility: Optional[StrictBool] = Field(default=False, description="Whether to tag for web accessibility when exporting to .PDF. False by default.", alias="tagForWebAccessibility")
    use_cmyk_colorspace: Optional[StrictBool] = Field(default=False, description="Whether to use CMYK colorspace when exporting to .PDF. False by default.", alias="useCmykColorspace")
    include_draft_watermark: Optional[StrictBool] = Field(default=False, description="Whether to include a \"Draft\" watermark when exporting to .PDF. False by default.", alias="includeDraftWatermark")
    include_comments: Optional[StrictBool] = Field(default=False, description="Whether to include comments when exporting to .PDF. False by default. When True, all comments are included, even those already resolved.", alias="includeComments")
    __properties: ClassVar[List[str]] = ["includeHyperlinks", "includeLeaderDots", "includeAlternateRowFill", "tagForWebAccessibility", "useCmykColorspace", "includeDraftWatermark", "includeComments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresentationToPdfOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresentationToPdfOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeHyperlinks": obj.get("includeHyperlinks") if obj.get("includeHyperlinks") is not None else False,
            "includeLeaderDots": obj.get("includeLeaderDots") if obj.get("includeLeaderDots") is not None else False,
            "includeAlternateRowFill": obj.get("includeAlternateRowFill") if obj.get("includeAlternateRowFill") is not None else False,
            "tagForWebAccessibility": obj.get("tagForWebAccessibility") if obj.get("tagForWebAccessibility") is not None else False,
            "useCmykColorspace": obj.get("useCmykColorspace") if obj.get("useCmykColorspace") is not None else False,
            "includeDraftWatermark": obj.get("includeDraftWatermark") if obj.get("includeDraftWatermark") is not None else False,
            "includeComments": obj.get("includeComments") if obj.get("includeComments") is not None else False
        })
        return _obj


