# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.graph_attachment import GraphAttachment
from openapi_client.models.matrix import Matrix
from typing import Optional, Set
from typing_extensions import Self

class TestPhase(BaseModel):
    """
    Describes details of a test phase, including its ID and name
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the test phase")
    name: Optional[StrictStr] = Field(default=None, description="The name of the test phase")
    attachments: Optional[List[GraphAttachment]] = Field(default=None, description="An optional array of partial information about the attachments on the test phase. To include in the response, provide the query string `$expand=attachments`.")
    matrices: Optional[List[Matrix]] = Field(default=None, description="An optional array of partial information about the matrices on the test phase. To include in the response, provide the query string, `$expand=matrices`.")
    __properties: ClassVar[List[str]] = ["id", "name", "attachments", "matrices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attachments",
            "matrices",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matrices (list)
        _items = []
        if self.matrices:
            for _item_matrices in self.matrices:
                if _item_matrices:
                    _items.append(_item_matrices.to_dict())
            _dict['matrices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "attachments": [GraphAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "matrices": [Matrix.from_dict(_item) for _item in obj["matrices"]] if obj.get("matrices") is not None else None
        })
        return _obj


