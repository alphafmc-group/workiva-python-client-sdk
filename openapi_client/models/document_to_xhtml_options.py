# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentToXhtmlOptions(BaseModel):
    """
    Optional options to export the document as .XHTML. If no options are provided, `editableXhtml` will be true and all other options will be false. 
    """ # noqa: E501
    include_external_hyperlinks: Optional[StrictBool] = Field(default=False, description="Whether to include external hyperlinks when exporting to .XHTML. False by default.", alias="includeExternalHyperlinks")
    include_headers_and_footers: Optional[StrictBool] = Field(default=False, description="Whether to include the headers and footers when exporting to .XHTML. False by default.", alias="includeHeadersAndFooters")
    editable_xhtml: Optional[StrictBool] = Field(default=False, description="Whether the resulting XHTML is editable when exporting to .XHTML. False by default. If set to true, other options must be false. When exporting XHTML that you plan to edit or modify, use this option. Otherwise, the export retains fidelity so it visually matches the document as it appears in the browser. ", alias="editableXhtml")
    editable_simple: Optional[StrictBool] = Field(default=False, description="Whether to produce simplified editable XHTML. This option produces editable XHTML that is simpler than the  editableXHTML option. Use this option when you only need the textual and numeric content of a document, but not  any of the images or complex formatting. When this option is true, all other XHTML export options must be false. ", alias="editableSimple")
    __properties: ClassVar[List[str]] = ["includeExternalHyperlinks", "includeHeadersAndFooters", "editableXhtml", "editableSimple"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentToXhtmlOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentToXhtmlOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeExternalHyperlinks": obj.get("includeExternalHyperlinks") if obj.get("includeExternalHyperlinks") is not None else False,
            "includeHeadersAndFooters": obj.get("includeHeadersAndFooters") if obj.get("includeHeadersAndFooters") is not None else False,
            "editableXhtml": obj.get("editableXhtml") if obj.get("editableXhtml") is not None else False,
            "editableSimple": obj.get("editableSimple") if obj.get("editableSimple") is not None else False
        })
        return _obj


