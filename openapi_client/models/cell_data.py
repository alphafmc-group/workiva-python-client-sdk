# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.effective_formats import EffectiveFormats
from openapi_client.models.formats import Formats
from typing import Optional, Set
from typing_extensions import Self

class CellData(BaseModel):
    """
    Data in a cell
    """ # noqa: E501
    value: Optional[Any] = Field(default=None, description="String, numeric, or boolean value of the cell. If the cell is a formula, this value will be the formula string.")
    calculated_value: Optional[Any] = Field(default=None, description="String, numeric, or boolean value result value of the cell. If the cell is a formula, this value will be the calculated result.", alias="calculatedValue")
    formats: Optional[Formats] = None
    effective_formats: Optional[EffectiveFormats] = Field(default=None, alias="effectiveFormats")
    __properties: ClassVar[List[str]] = ["value", "calculatedValue", "formats", "effectiveFormats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CellData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of formats
        if self.formats:
            _dict['formats'] = self.formats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of effective_formats
        if self.effective_formats:
            _dict['effectiveFormats'] = self.effective_formats.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if calculated_value (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_value is None and "calculated_value" in self.model_fields_set:
            _dict['calculatedValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CellData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "value": obj.get("value"),
            "calculatedValue": obj.get("calculatedValue"),
            "formats": Formats.from_dict(obj["formats"]) if obj.get("formats") is not None else None,
            "effectiveFormats": EffectiveFormats.from_dict(obj["effectiveFormats"]) if obj.get("effectiveFormats") is not None else None
        })
        return _obj


