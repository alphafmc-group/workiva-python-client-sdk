# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.border import Border
from openapi_client.models.range import Range
from typing import Optional, Set
from typing_extensions import Self

class ApplyBorders(BaseModel):
    """
    Apply borders to ranges
    """ # noqa: E501
    ranges: List[Range] = Field(description="The ranges to apply borders")
    top: Optional[Border] = None
    bottom: Optional[Border] = None
    left: Optional[Border] = None
    right: Optional[Border] = None
    inner_horizontal: Optional[Border] = Field(default=None, alias="innerHorizontal")
    inner_vertical: Optional[Border] = Field(default=None, alias="innerVertical")
    __properties: ClassVar[List[str]] = ["ranges", "top", "bottom", "left", "right", "innerHorizontal", "innerVertical"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplyBorders from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item_ranges in self.ranges:
                if _item_ranges:
                    _items.append(_item_ranges.to_dict())
            _dict['ranges'] = _items
        # override the default output from pydantic by calling `to_dict()` of top
        if self.top:
            _dict['top'] = self.top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bottom
        if self.bottom:
            _dict['bottom'] = self.bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of left
        if self.left:
            _dict['left'] = self.left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of right
        if self.right:
            _dict['right'] = self.right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_horizontal
        if self.inner_horizontal:
            _dict['innerHorizontal'] = self.inner_horizontal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_vertical
        if self.inner_vertical:
            _dict['innerVertical'] = self.inner_vertical.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplyBorders from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ranges": [Range.from_dict(_item) for _item in obj["ranges"]] if obj.get("ranges") is not None else None,
            "top": Border.from_dict(obj["top"]) if obj.get("top") is not None else None,
            "bottom": Border.from_dict(obj["bottom"]) if obj.get("bottom") is not None else None,
            "left": Border.from_dict(obj["left"]) if obj.get("left") is not None else None,
            "right": Border.from_dict(obj["right"]) if obj.get("right") is not None else None,
            "innerHorizontal": Border.from_dict(obj["innerHorizontal"]) if obj.get("innerHorizontal") is not None else None,
            "innerVertical": Border.from_dict(obj["innerVertical"]) if obj.get("innerVertical") is not None else None
        })
        return _obj


