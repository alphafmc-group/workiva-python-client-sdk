# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sheet_update_apply_borders import SheetUpdateApplyBorders
from openapi_client.models.sheet_update_apply_formats import SheetUpdateApplyFormats
from openapi_client.models.sheet_update_clear_borders import SheetUpdateClearBorders
from openapi_client.models.sheet_update_clear_formats import SheetUpdateClearFormats
from openapi_client.models.sheet_update_delete_columns import SheetUpdateDeleteColumns
from openapi_client.models.sheet_update_delete_rows import SheetUpdateDeleteRows
from openapi_client.models.sheet_update_edit_cells import SheetUpdateEditCells
from openapi_client.models.sheet_update_edit_range import SheetUpdateEditRange
from openapi_client.models.sheet_update_hide_columns import SheetUpdateHideColumns
from openapi_client.models.sheet_update_hide_rows import SheetUpdateHideRows
from openapi_client.models.sheet_update_insert_columns import SheetUpdateInsertColumns
from openapi_client.models.sheet_update_insert_rows import SheetUpdateInsertRows
from openapi_client.models.sheet_update_merge_ranges import SheetUpdateMergeRanges
from openapi_client.models.sheet_update_resize_columns import SheetUpdateResizeColumns
from openapi_client.models.sheet_update_resize_columns_to_fit import SheetUpdateResizeColumnsToFit
from openapi_client.models.sheet_update_resize_rows import SheetUpdateResizeRows
from openapi_client.models.sheet_update_resize_rows_to_fit import SheetUpdateResizeRowsToFit
from openapi_client.models.sheet_update_unhide_columns import SheetUpdateUnhideColumns
from openapi_client.models.sheet_update_unhide_rows import SheetUpdateUnhideRows
from openapi_client.models.sheet_update_unmerge_ranges import SheetUpdateUnmergeRanges
from typing import Optional, Set
from typing_extensions import Self

class SheetUpdate(BaseModel):
    """
    An update to a sheet. Only a single field on the SheetUpdate may be set per request.
    """ # noqa: E501
    edit_cells: Optional[SheetUpdateEditCells] = Field(default=None, alias="editCells")
    edit_range: Optional[SheetUpdateEditRange] = Field(default=None, alias="editRange")
    apply_formats: Optional[SheetUpdateApplyFormats] = Field(default=None, alias="applyFormats")
    clear_formats: Optional[SheetUpdateClearFormats] = Field(default=None, alias="clearFormats")
    insert_rows: Optional[SheetUpdateInsertRows] = Field(default=None, alias="insertRows")
    insert_columns: Optional[SheetUpdateInsertColumns] = Field(default=None, alias="insertColumns")
    delete_rows: Optional[SheetUpdateDeleteRows] = Field(default=None, alias="deleteRows")
    delete_columns: Optional[SheetUpdateDeleteColumns] = Field(default=None, alias="deleteColumns")
    hide_rows: Optional[SheetUpdateHideRows] = Field(default=None, alias="hideRows")
    hide_columns: Optional[SheetUpdateHideColumns] = Field(default=None, alias="hideColumns")
    unhide_rows: Optional[SheetUpdateUnhideRows] = Field(default=None, alias="unhideRows")
    unhide_columns: Optional[SheetUpdateUnhideColumns] = Field(default=None, alias="unhideColumns")
    resize_rows: Optional[SheetUpdateResizeRows] = Field(default=None, alias="resizeRows")
    resize_rows_to_fit: Optional[SheetUpdateResizeRowsToFit] = Field(default=None, alias="resizeRowsToFit")
    resize_columns: Optional[SheetUpdateResizeColumns] = Field(default=None, alias="resizeColumns")
    resize_columns_to_fit: Optional[SheetUpdateResizeColumnsToFit] = Field(default=None, alias="resizeColumnsToFit")
    merge_ranges: Optional[SheetUpdateMergeRanges] = Field(default=None, alias="mergeRanges")
    unmerge_ranges: Optional[SheetUpdateUnmergeRanges] = Field(default=None, alias="unmergeRanges")
    apply_borders: Optional[SheetUpdateApplyBorders] = Field(default=None, alias="applyBorders")
    clear_borders: Optional[SheetUpdateClearBorders] = Field(default=None, alias="clearBorders")
    __properties: ClassVar[List[str]] = ["editCells", "editRange", "applyFormats", "clearFormats", "insertRows", "insertColumns", "deleteRows", "deleteColumns", "hideRows", "hideColumns", "unhideRows", "unhideColumns", "resizeRows", "resizeRowsToFit", "resizeColumns", "resizeColumnsToFit", "mergeRanges", "unmergeRanges", "applyBorders", "clearBorders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SheetUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of edit_cells
        if self.edit_cells:
            _dict['editCells'] = self.edit_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edit_range
        if self.edit_range:
            _dict['editRange'] = self.edit_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apply_formats
        if self.apply_formats:
            _dict['applyFormats'] = self.apply_formats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clear_formats
        if self.clear_formats:
            _dict['clearFormats'] = self.clear_formats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_rows
        if self.insert_rows:
            _dict['insertRows'] = self.insert_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_columns
        if self.insert_columns:
            _dict['insertColumns'] = self.insert_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_rows
        if self.delete_rows:
            _dict['deleteRows'] = self.delete_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_columns
        if self.delete_columns:
            _dict['deleteColumns'] = self.delete_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hide_rows
        if self.hide_rows:
            _dict['hideRows'] = self.hide_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hide_columns
        if self.hide_columns:
            _dict['hideColumns'] = self.hide_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unhide_rows
        if self.unhide_rows:
            _dict['unhideRows'] = self.unhide_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unhide_columns
        if self.unhide_columns:
            _dict['unhideColumns'] = self.unhide_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resize_rows
        if self.resize_rows:
            _dict['resizeRows'] = self.resize_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resize_rows_to_fit
        if self.resize_rows_to_fit:
            _dict['resizeRowsToFit'] = self.resize_rows_to_fit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resize_columns
        if self.resize_columns:
            _dict['resizeColumns'] = self.resize_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resize_columns_to_fit
        if self.resize_columns_to_fit:
            _dict['resizeColumnsToFit'] = self.resize_columns_to_fit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merge_ranges
        if self.merge_ranges:
            _dict['mergeRanges'] = self.merge_ranges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unmerge_ranges
        if self.unmerge_ranges:
            _dict['unmergeRanges'] = self.unmerge_ranges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apply_borders
        if self.apply_borders:
            _dict['applyBorders'] = self.apply_borders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clear_borders
        if self.clear_borders:
            _dict['clearBorders'] = self.clear_borders.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SheetUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "editCells": SheetUpdateEditCells.from_dict(obj["editCells"]) if obj.get("editCells") is not None else None,
            "editRange": SheetUpdateEditRange.from_dict(obj["editRange"]) if obj.get("editRange") is not None else None,
            "applyFormats": SheetUpdateApplyFormats.from_dict(obj["applyFormats"]) if obj.get("applyFormats") is not None else None,
            "clearFormats": SheetUpdateClearFormats.from_dict(obj["clearFormats"]) if obj.get("clearFormats") is not None else None,
            "insertRows": SheetUpdateInsertRows.from_dict(obj["insertRows"]) if obj.get("insertRows") is not None else None,
            "insertColumns": SheetUpdateInsertColumns.from_dict(obj["insertColumns"]) if obj.get("insertColumns") is not None else None,
            "deleteRows": SheetUpdateDeleteRows.from_dict(obj["deleteRows"]) if obj.get("deleteRows") is not None else None,
            "deleteColumns": SheetUpdateDeleteColumns.from_dict(obj["deleteColumns"]) if obj.get("deleteColumns") is not None else None,
            "hideRows": SheetUpdateHideRows.from_dict(obj["hideRows"]) if obj.get("hideRows") is not None else None,
            "hideColumns": SheetUpdateHideColumns.from_dict(obj["hideColumns"]) if obj.get("hideColumns") is not None else None,
            "unhideRows": SheetUpdateUnhideRows.from_dict(obj["unhideRows"]) if obj.get("unhideRows") is not None else None,
            "unhideColumns": SheetUpdateUnhideColumns.from_dict(obj["unhideColumns"]) if obj.get("unhideColumns") is not None else None,
            "resizeRows": SheetUpdateResizeRows.from_dict(obj["resizeRows"]) if obj.get("resizeRows") is not None else None,
            "resizeRowsToFit": SheetUpdateResizeRowsToFit.from_dict(obj["resizeRowsToFit"]) if obj.get("resizeRowsToFit") is not None else None,
            "resizeColumns": SheetUpdateResizeColumns.from_dict(obj["resizeColumns"]) if obj.get("resizeColumns") is not None else None,
            "resizeColumnsToFit": SheetUpdateResizeColumnsToFit.from_dict(obj["resizeColumnsToFit"]) if obj.get("resizeColumnsToFit") is not None else None,
            "mergeRanges": SheetUpdateMergeRanges.from_dict(obj["mergeRanges"]) if obj.get("mergeRanges") is not None else None,
            "unmergeRanges": SheetUpdateUnmergeRanges.from_dict(obj["unmergeRanges"]) if obj.get("unmergeRanges") is not None else None,
            "applyBorders": SheetUpdateApplyBorders.from_dict(obj["applyBorders"]) if obj.get("applyBorders") is not None else None,
            "clearBorders": SheetUpdateClearBorders.from_dict(obj["clearBorders"]) if obj.get("clearBorders") is not None else None
        })
        return _obj


