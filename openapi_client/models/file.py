# coding: utf-8

"""
    Platform API

    Use the Workiva Platform API to programmatically manage items in the Workiva platform, such as files, folders, tasks, comments, documents, spreadsheets, and presentations. 

    The version of the OpenAPI document: v1
    Contact: platformsupport@workiva.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    Details about the file, including its ID, name, kind, and milestone dates. 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the file")
    name: Optional[StrictStr] = Field(default=None, description="Name of the file")
    container: Optional[StrictStr] = Field(default='', description="The unique identifier of the container that houses the file, such as a folder. If empty, the root folder is the container. ")
    kind: Optional[StrictStr] = Field(default=None, description="Kind of the file")
    type: Optional[StrictStr] = Field(default=None, description="Type of the file")
    template: Optional[StrictBool] = None
    created: Optional[Action] = None
    modified: Optional[Action] = None
    __properties: ClassVar[List[str]] = ["id", "name", "container", "kind", "type", "template", "created", "modified"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Document', 'Spreadsheet', 'Presentation', 'Folder']):
            raise ValueError("must be one of enum values ('Document', 'Spreadsheet', 'Presentation', 'Folder')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "type",
            "template",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "container": obj.get("container") if obj.get("container") is not None else '',
            "kind": obj.get("kind"),
            "type": obj.get("type"),
            "template": obj.get("template"),
            "created": Action.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "modified": Action.from_dict(obj["modified"]) if obj.get("modified") is not None else None
        })
        return _obj


